/*==============================================
Name        : Shadman Shariar                 ||
Email       : shadman.shariar@northsouth.edu  ||
University  : North South University (NSU)    ||
Facebook    : shadman.shahriar.007            ||
==============================================*/
 
//import java.math.BigInteger;
//import java.text.DecimalFormat;
 
import java.util.*;
 
public class Main {
	
public static Scanner input = new Scanner (System.in); 
 
public static void main(String[] args) {
		
//DecimalFormat df = new DecimalFormat(".00");	
//BigInteger bi1 = new BigInteger("");	
//StringBuilder sb = new StringBuilder();
		
    Scanner input = new Scanner(System.in);
        
    int t = input.nextInt();
    
    for (int i = 0; i < t; i++) {
		
    	
    	int n = input.nextInt();
    	
    	if (n==1) {
    		System.out.println(1);
    	}
    	else if (n==2) {
    		System.out.println(-1);
    	}
    	else {
    		int c = 0 ;
    		int k = -1 ;
    		int [] arr =  new int [n*n];
    		for (int j = 2; j <= n*n; j++) {
    			if (j%2==0) {
    			k++;
				arr[k] = j;}
			}
    		for (int j = 1; j <= n*n; j++) {
				if (j%2!=0) {
    			k++;
    			arr[k] = j;}
			}
    		
    		for (int j = 0; j < arr.length; j++) {
				
    			System.out.print(arr[j]+" ");
    			c++;
    			
    			if (c==n) {
    				System.out.println();
    				c=0;
    			}
    			
			}
    	}
    	
    	
    	
    }
        input.close();
		
		System.exit(0);
}
 
public static boolean issquare(long n) {
	long sqrt=(long) Math.sqrt(n);
	for (int i=(int) Math.max(1, sqrt-5); i<=sqrt+5; i++)
		if (i*i==n)
			return true;
	return false;
}
 
	public static long sumarray(long a[])
	 {
		
	    long sum=0;
	    for(int i=0;i<a.length;i++)
	    sum+=a[i];
	    return sum;
	 }
	
	public static boolean isperfectsquare(int n) {
        for (int i = 1; i * i <= n; i++) {
 
            if ((n % i == 0) && (n / i == i)) {
                return true;
            }
        }
        return false;
    }
	
	public static int removeduplicateelements(int arr[], int n){ 
		Arrays.sort(arr);
        if (n==0 || n==1){  
            return n;  
        }  
        int[] temp = new int[n];  
        int j = 0;  
        for (int i=0; i<n-1; i++){  
            if (arr[i] != arr[i+1]){  
                temp[j++] = arr[i];  
            }  
         }  
        temp[j++] = arr[n-1];      
        for (int i=0; i<j; i++){  
            arr[i] = temp[i];  
        }  
        return j;  
    }  
	
	public static int fibon(int n) {
 
		if (n <= 1) {
 
			return n;
		}
		int[] array = new int[n + 1];
		array[0] = 0;
		array[1] = 1;
		for (int i = 2; i <= n; i++) {
			array[i] = array[i - 2] + array[i - 1];
		}
 
		return array[n];
 
	}
 
	public static long sumofdigits(long n) {
		long sum = 0;
 
		while (n != 0) {
			sum = sum + n % 10;
			n = n / 10;
		}
 
		return sum;
	}
 
	public static int reversedigits(int num) {
		int rev_num = 0;
		while (num > 0) {
			rev_num = rev_num * 10 + num % 10;
			num = num / 10;
		}
		return rev_num;
	}
 
	public static int binarysearch(int arr[], int l, int r, int x) {
 
		if (r >= l) {
			int mid = l + (r - l) / 2;
			if (arr[mid] == x)
				return mid;
			if (arr[mid] > x)
				return binarysearch(arr, l, mid - 1, x);
			return binarysearch(arr, mid + 1, r, x);
		}
		return -1;
	}
 
	public static long gcd(long a, long b) {
		if (a == 0)
			return b;
		return gcd(b % a, a);
	}
 
	public static long lcm(long a, long b) {
		return (a / gcd(a, b)) * b;
	}
 
	public static void rangeofprimenumber(int a, int b) {
		int i, j, flag;
		for (i = a; i <= b; i++) {
			if (i == 1 || i == 0)
				continue;
			flag = 1;
			for (j = 2; j <= i / 2; ++j) {
				if (i % j == 0) {
					flag = 0;
					break;
				}
			}
			if (flag == 1)
				System.out.println(i);
		}
	}
 
	public static boolean isprime(long n) {
		if (n <= 1)
			return false;
		else if (n == 2)
			return true;
		else if (n % 2 == 0)
			return false;
		for (long i = 3; i <= Math.sqrt(n); i += 2) {
			if (n % i == 0)
				return false;
		}
		return true;
	}
 
	public static int factorial(int n) {
		return (n == 1 || n == 0) ? 1 : n * factorial(n - 1);
	}
 
	public static int[] reversearrayinrange(int arr[], int start, int end) {
		int temp;
 
		while (start < end) {
			temp = arr[start];
			arr[start] = arr[end];
			arr[end] = temp;
			start++;
			end--;
		}
		return arr;
	}
 
}
